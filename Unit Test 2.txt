

using System;
using System.Collections.Generic;
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using Estream.Common.Entitlements.Data;
using Estream.Contracts.Common.Contracts.Enums;
using Estream.Contracts.Common.Contracts.Events;
using Estream.Contracts.Common.Transitions;
using Estream.Contracts.ContractHeaderDomain.Handlers;
using Estream.Contracts.StorageContractDomain;
using Estream.Contracts.TestCommon.ObjectMothers;
using Estream.Contracts.TestCommon.ObjectMothers.MasterData;
using FluentAssertions;
using Foundation.Coding;
using Foundation.Coding.Transitions;
using Foundation.NServiceBus;
using Highway.Data;
using NServiceBus.Testing;
using NSubstitute;
using NUnit.Framework;

namespace Estream.Contracts.UnitTests.ContractHeaderDomain.Handlers
{
    [TestFixture]

    public class BulkCopyContractEventHandlerTest
    {
        private ISecuredDomainRepositoryFactory _domainRepository;
        private BulkCopyContractEvent _event;
        private TestableMessageHandlerContext _messageContext;
        private IProvideNow _now;
        private IRepository _repository;
        private IDynamicallyRouteTransitions _transitionRouter;
        private IDataContext _dataContext;
        private ITransactionalMessageSession _messageSession;

        [SetUp]
        public void RunBeforeEachTest()
        {
            _domainRepository = Substitute.For<ISecuredDomainRepositoryFactory>();
            _repository = Substitute.For<IRepository>();
            _dataContext = Substitute.For<IDataContext>();
            _repository.Context.Returns(_dataContext);
            _domainRepository.Create<StorageContractsDomain>().Returns(_repository);
            _transitionRouter = Substitute.For<IDynamicallyRouteTransitions>();
            _now = Substitute.For<IProvideNow>();
            _now.Now().Returns(new DateTime(2018, 7, 7));
            _messageSession = Substitute.For<ITransactionalMessageSession>();
        }

        [TearDown]
        public void RunAfterEachtest()
        {
            _repository = null;
        }

        [Test]
        public void ShouldBulkCopyContract()
        {
            // Arrange
            var list = new List<ExistingContractTransition>();
            var storageContract = CopyStorageContractTransitionObjectMother.CopyContractWithSameStartDateAndEndDate();
            var transportationContract = CopyTransportationContractTransitionObjectMother.CopyContractWithSameStartDateAndEndDate();
            var existingContract = new ExistingContractTransition()
            {
                Id = 0,
                IsDocument = false,
                StartDate = storageContract.StartDate,
                EndDate = storageContract.EndDate,
                Description = storageContract.Description,
                Alias = storageContract.Alias,
                IsJointContract = storageContract.IsJointContract,
                ServiceTypeId = ContractServiceType.Storage
            };

            list.Add(existingContract);
            list.Add(new ExistingContractTransition
            {
                Id = 1,
                IsDocument = false,
                StartDate = transportationContract.StartDate,
                EndDate = transportationContract.EndDate,
                Description = transportationContract.Description,
                Alias = transportationContract.Alias,
                IsJointContract = transportationContract.IsJointContract,
                ServiceTypeId = ContractServiceType.Transportation
            });
            _event = new BulkCopyContractEvent(UserObjectMother.EvolveTestUserB(), storageContract.CustomerBusinessEntityId, storageContract.CustomerAccountIds.First(), list);

            // Act
            var bulkCopyContractEventHandler = new BulkCopyContractEventHandler(_now, _transitionRouter, _messageSession);
            Func<Task> task = async () => await bulkCopyContractEventHandler.Handle(_event, _messageContext);

            // Assert
            task.Should().NotThrowAsync<Exception>();
            task.Should().NotThrowAsync<VerificationException>();
        }
    }
}
