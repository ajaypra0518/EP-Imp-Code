// <copyright file="GetEnumValues.cs" company="Enterprise Products Partners L.P. (Enterprise)">
// Â© Copyright 2012 - 2019, Enterprise Products Partners L.P. (Enterprise), All Rights Reserved.
// Permission to use, copy, modify, or distribute this software source code, binaries or
// related documentation, is strictly prohibited, without written consent from Enterprise.
// For inquiries about the software, contact Enterprise: Enterprise Products Company Law
// Department, 1100 Louisiana, 10th Floor, Houston, Texas 77002, phone 713-381-6500.
// </copyright>

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Foundation.Coding.Extensions;

namespace Estream.Common.Utilities
{
    public static class GetEnumValues
    {
        public static IEnumerable<T> Of<T>()
            where T : struct, IConvertible
        {
            return Enum.GetValues(typeof(T)).Cast<T>();
        }

        public static IEnumerable<IdAndName> ByDescriptionAttribute<T>(Func<Enum, string> descriptionGetter = null)
        {
            descriptionGetter = descriptionGetter ?? (e => e.GetEnumDescription());

            return Enum.GetValues(typeof(T)).Cast<T>().Select(p => new IdAndName(Convert.ToInt32(p), descriptionGetter(p as Enum)));
        }

        public static Dictionary<int, string> ToDictionary<T>(params T[] except)
            where T : struct, IConvertible
        {
            return Enum.GetValues(typeof(T))
                .Cast<T>()
                .Except(except)
                .ToDictionary(
                    t => Convert.ToInt32(t),
                    t =>
                    {
                        var fi = t.GetType().GetField(t.ToString());
                        var attributes = (DescriptionAttribute[])fi.GetCustomAttributes(typeof(DescriptionAttribute), false);
                        return attributes.Length > 0 ? attributes[0].Description : t.ToString();
                    });
        }

        public static IEnumerable<IdAndName> ToIdsAndNames<T>()
            where T : struct, IConvertible
        {
            var idsAndNames = new List<IdAndName>();
            var enumValues = Enum.GetValues(typeof(T));
            foreach (Enum enumValue in enumValues)
            {
                var id = Convert.ToInt64(enumValue);
                var name = enumValue.GetEnumDescription();

                idsAndNames.Add(new IdAndName(id, name));
            }

            return idsAndNames;
        }
    }

    public class SelectListItemDescriptionAttribute : DescriptionAttribute
    {
        public SelectListItemDescriptionAttribute(string description, string group)
            : base(description)
        {
            Group = group;
        }

        public string Group { get; set; }
    }
}

 Statuses = GetEnumValues.Of<ContractStatus>()
                                    .Select(item => new { Id = (long)item, Value = item.GetEnumDescription() })
                                    .OrderBy(c => c.Value)
                                    .ToDictionary(d => d.Id, d => d.Value);
