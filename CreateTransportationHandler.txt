// <copyright file="CreateTransportationInfoHandler.cs" company="Enterprise Products Partners L.P. (Enterprise)">
// Â© Copyright 2012 - 2019, Enterprise Products Partners L.P. (Enterprise), All Rights Reserved.
// Permission to use, copy, modify, or distribute this software source code, binaries or
// related documentation, is strictly prohibited, without written consent from Enterprise.
// For inquiries about the software, contact Enterprise: Enterprise Products Company Law
// Department, 1100 Louisiana, 10th Floor, Houston, Texas 77002, phone 713-381-6500.
// </copyright>

using System;
using System.Collections.Generic;
using System.Linq;

using Estream.Common;
using Estream.Common.Entitlements.Data;
using Estream.Common.Transitions;
using Estream.Contracts.TransportationContractDomain.Entities;
using Estream.Contracts.TransportationContractDomain.Queries;
using Estream.Contracts.TransportationContractDomain.Transitions;

using Foundation.Coding;

using Highway.Data;

namespace Estream.Contracts.TransportationContractDomain.Handlers
{
    public class CreateTransportationInfoHandler : TransitionHandlerBaseSecured<CreateTransportationContractInfoTransition>
    {
        private readonly IProvideNow _provideNow;

        private readonly IRepository _repository;

        public CreateTransportationInfoHandler(
            ISecuredDomainRepositoryFactory domainRepository,
            IProvideNow now)
            : base(domainRepository)
        {
            _repository = domainRepository.Create<TransportContractsDomain>();
            _provideNow = now;
        }

        protected override void HandleTransitionInternal(CreateTransportationContractInfoTransition transition)
        {
            var contract = _repository.Find(new GetTransportationContractById(transition.Id));

            Action<ICollection<TransportationLaycanLimit>> action1 = a => { _repository.Context.RemoveAll(a); };
            Action<ICollection<TransportationLaycanWindow>> action2 = b => { _repository.Context.RemoveAll(b); };

            var updatedDockServices = transition.DockServices.Select(dockService => new TransportationLaycanLimit(transition.Id, dockService.LaycanType, dockService.FromPeriod, dockService.ToPeriod, dockService.TerminalServiceActivityType, dockService.CommittedVolume, dockService.NominationLimit, (short)dockService.NominationLimitUom, (short)dockService.CommittedVolumeUom));
            var updatedLaycanPeriods = transition.LaycanWindowPeriods.Select(laycanPeriod => new TransportationLaycanWindow(transition.Id, laycanPeriod.FromPeriod, laycanPeriod.ToPeriod, laycanPeriod.LaycanWindow));
            contract.AddTransportationDetail(action1, action2, updatedDockServices, updatedLaycanPeriods, _provideNow.Now());
            _repository.Context.Commit();
        }
    }
}
