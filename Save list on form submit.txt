@*
    Â© Copyright 2012 - 2016, Enterprise Products Partners L.P. (Enterprise), All Rights Reserved.
    Permission to use, copy, modify, or distribute this software source code, binaries or
    related documentation, is strictly prohibited, without written consent from Enterprise.
    For inquiries about the software, contact Enterprise: Enterprise Products Company Law
    Department, 1100 Louisiana, 10th Floor, Houston, Texas 77002, phone 713-381-6500.
*@
@using Estream.Common.Web
@using Estream.Common.Web.SidebarTags
@using Estream.Common.Legacy.Web
@using Estream.Web.Common.Extensions
@model Estream.Web.Areas.Contracts.ViewModels.Contracts.BulkCopyContractViewModel

@section Breadcrumbs {

    @Html.Breadcrumbs(
            new Breadcrumb(Html.ActionLink("Contracts Search", "Index")),
            new Breadcrumb(Html.ActionLink("Contracts Copy", "BulkCopy"))
        )
}

@section Sidebar {
    @using (Html.Section("Actions"))
    {
    }
}
<h2 class="page-heading">
    <span>Bulk Copy Contract</span>
</h2>

@Html.ValidationSummary()

@using (Html.EstreamBeginForm("BulkCopySubmit", "Contracts", FormMethod.Post))
{
    using (Html.Section("Contract Information"))
    {
        <div class="row">
            <div class="columns small-6">
                @Html.FormGroup(
                         label: "Customer",
                         control: Html.DropDownListFor(x => x.CustomerId, new SelectList(Model.Customers, "Id", "Name"), "", new
                         {
                             data_bind = "value: customerId"
                         }),
                         required: true)

                @Html.HiddenFor(x => x.CustomerName, new { data_bind = "value: customerName", })

            </div>
            <div class="columns small-6">
                @Html.FormGroup(label: "Start Date",
                control: Html.TextBoxFor(x => x.StartDate, new
                {
                    data_bind = "kendoDatePicker: { value: startDate }",
                    @Value = Model.StartDate,
                    @class = "form-control",
                    required = true
                }))
            </div>
        </div>

        <div class="row">
            <div class="columns small-6">
                @Html.FormGroup(
                         label: "Customer Account(s)",
                         control: Html.DropDownListFor(x => x.CustomerAccountId, Enumerable.Empty<SelectListItem>(), "", new
                         {
                             data_bind = "options: customerAccounts, optionsText: 'value', optionsValue: 'id', optionsCaption: '', value: customerAccountId "
                         }),
                         required: true)
            </div>
            <div class="columns small-6">
                @Html.FormGroup(label: "End Date",
                control: Html.TextBoxFor(x => x.EndDate, new
                {
                    data_bind = "kendoDatePicker: { value: endDate }",
                    @class = "form-control",
                    required = true
                }),
                required: true)
            </div>
        </div>

        using (Html.Section("Contracts Selected for Copy"))
        {
            int i = 0;
            <table>
                <thead>
                    <tr>
                        <th>Select</th>
                        <th>Contract Name</th>
                        <th>Contract Description</th>
                        <th>Validation</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var contract in Model.ExistingContracts)
                    {
                        <tr>
                            <td>
                                @Html.CheckBox("ExistingContracts[" + i + "].IsSelected", contract.IsSelected)
                                @Html.Hidden("ExistingContracts[" + i + "].Id", contract.Id)
                                @Html.Hidden("ExistingContracts[" + i + "].Alias", contract.Alias)
                                @Html.Hidden("ExistingContracts[" + i + "].Description", contract.Description)
                                @Html.Hidden("ExistingContracts[" + i + "].IsDocument", contract.IsDocument)
                                @Html.Hidden("ExistingContracts[" + i + "].IsJointContract", contract.IsJointContract)
                                @Html.Hidden("ExistingContracts[" + i + "].Number", contract.Number)
                                @Html.Hidden("ExistingContracts[" + i + "].ValidationMessage", contract.ValidationMessage)
                                @Html.Hidden("ExistingContracts[" + i + "].ContractGroupId", contract.ContractGroupId)
                                @Html.Hidden("ExistingContracts[" + i + "].ServiceTypeId", contract.ServiceTypeId)
                                @Html.Hidden("ExistingContracts[" + i + "].AssetOwnerAccountId", contract.AssetOwnerAccountId)
                                @Html.Hidden("ExistingContracts[" + i + "].ServiceSubTypeId", contract.ServiceSubTypeId)
                                @Html.Hidden("ExistingContracts[" + i + "].AssetGroupId", contract.AssetGroupId)
                                @Html.Hidden("ExistingContracts[" + i + "].CustomerId", contract.CustomerId)
                                @Html.Hidden("ExistingContracts[" + i + "].CommercialAssetId", contract.CommercialAssetId)
                                @Html.Hidden("ExistingContracts[" + i + "].InterCompanyCommercialAssetId", contract.InterCompanyCommercialAssetId)
                                @Html.Hidden("ExistingContracts[" + i + "].PhysicalAssetId", contract.PhysicalAssetId)
                            </td>
                            <td>@contract.Number</td>
                            <td>@contract.Description</td>
                            <td>@contract.ValidationMessage</td>
                        </tr>
                        i++;
                    }
                </tbody>
            </table>
            i++;
        }

        <section class="actions text-right">
            <button class="radius" type="submit">Copy</button>
        </section>

    }
}

@section scripts
{
    var preloadBulkCopyContractViewModel = @(Html.ToJson(Model));
}
